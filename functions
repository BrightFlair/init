#!/usr/bin/env bash

# @param 1 HOSTNAME To use for instance tag hostname
# @param 2 AMI_ID AMI to launch
# @param 3 KEY_NAME
# @param 4 INSTANCE_TYPE
# @param 5 SECURITY_GROUP_ID
#
# @return The newly launched instance ID
function launchInstance() {
	set -e

	if [ $# -ne 5 ]
	then
		echo "$0 requires 5 parameters: HOSTNAME, AMI_ID, KEY_NAME, INSTANCE_TYPE, SECURITY_GROUP_ID"
		exit 1
	fi
	local HOSTNAME=$1
	local AMI_ID=$2
	local KEY_NAME=$3
	local INSTANCE_TYPE=$4
	local SECURITY_GROUP_ID=$5

	local USER_DATA=$(sed -e s/INIT_TYPE/$INIT_TYPE/g user-data)
	local USER_DATA_BASE64=$(echo -e $USER_DATA | base64)

	local INSTANCE_ID=$(aws ec2 run-instances \
		--image-id "$AMI_ID" \
		--key-name "$KEY_NAME" \
		--instance-type "$INSTANCE_TYPE" \
		--security-group-ids "$SECURITY_GROUP_ID" \
		--associate-public-ip-address \
		--user-data "$USER_DATA_BASE64"
		--query "Instances[0].InstanceId" \
		--output text \
	)

	LAST_LAUNCHED_INSTANCE_ID=$INSTANCE_ID

	tagResource "$INSTANCE_ID" "Name" "$HOSTNAME"

	echo $INSTANCE_ID
}

# Sets key-value pair tag on specified resource
#
# @param 1 RESOURCE_ID
# @param 2 TAG_KEY
# @param 3 TAG_VALUE
#
# @return 0 on success, 1 on failure
function tagResource() {
	if [ $# -ne 3 ]
	then
		echo "$0 requires 3 parameters: RESOURCE_ID, TAG_KEY, TAG_VALUE"
		exit 1
	fi

	local RESOURCE_ID=$1
	local TAG_KEY=$2
	local TAG_VALUE=$3

	local RESULT=$(aws ec2 create-tags \
		--resources "$RESOURCE_ID" \
		--tags Key="$TAG_KEY",Value="$TAG_VALUE" \
		--output text \
	)

	if [ $RESULT == "true" ]
	then
		return 0
	else
		return 1
	fi
}

# Polls for completion either the provided ID or the last launched ID if no
# ID is provided. Once server is launched, the function returns the IP of the
# server.
#
# @param 1 [Optional] INSTANCE_ID
#
# @output IP address of server
function waitForLaunch() {
	local INSTANCE_ID=$LAST_LAUNCHED_INSTANCE_ID

	if [ $# -eq 1] ; then
		local INSTANCE_ID=$1
	fi

	while ! isServerRunning $INSTANCE_ID ; do
		sleep 1s
		echo -n "."
	done

	local IP=$(getServerIP $INSTANCE_ID)
	echo "$IP"
}

# Check server status is "running".
#
# @param 1 INSTANCE_ID
# @return 0 if the server is running, 1 if not
function isServerRunning() {
	local INSTANCE_ID=$1
	local STATE=$(aws ec2 describe-instances \
		--instance-ids "$INSTANCE_ID" \
		--query "Reservations[*].Instances[*].State.Name" \
		--output text \
	)

	if [ $STATE = "running" ] ; then
		return "running"
	else
		return "not running"
	fi
}